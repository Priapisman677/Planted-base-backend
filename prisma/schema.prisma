// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  VISITOR
  ENGINEER
  WORKER
  MEDIC
  OVERVIEWER
}

model User {
  id       Int    @id @default(autoincrement())
  email    String @unique
  password String
  name     String
  salt     String
  role     Role   @default(VISITOR)

  quarter         Personal_Quarter[] @relation("UserQuarters") //$ Since we will have two relationships between the same two tables I understand that it is very important to add custom names to them.
  favoriteQuarter Personal_Quarter?  @relation("FavoriteQuarter")
  user_Stored_Items User_Stored_Item[]
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

  @@map("users")
}

model Personal_Quarter {
  id             Int      @id @default(autoincrement())
  lockerCapacity Int
  zone           String
  userId         Int
  user           User     @relation("UserQuarters", fields: [userId], references: [id]) //$ Since we will have two relationships between the same two tables I understand that it is very important to add custom names to them to avoid conflicts and errors.
  favoritedById  Int?     @unique
  favoritedBy    User?    @relation("FavoriteQuarter", fields: [favoritedById], references: [id]) //$ Since we will have two relationships between the same two tables I understand that it is very important to add custom names to them to avoid conflicts and errors.
  claimedAt      DateTime @default(now())
  modifiedAt     DateTime @updatedAt

  @@map("personal_quarter")
}

model User_Stored_Item {
  id         Int      @id @default(autoincrement())
  quantity   Int
  userId     Int  
  user       User     @relation(fields: [userId], references: [id])
  itemId     Int
  item       Item     @relation(fields: [itemId], references: [id])
  claimedAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  @@map("lockers")
}

model Item {
  id           Int              @id @default(autoincrement())
  name         String           @unique
  description  String
  quantity     Int              @default(0)
  zone         String
  weight       Int
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  ItemToTag    ItemToTag[]
  storedByUser User_Stored_Item[]

  @@map("items")
}

model Tag {
  id        Int         @id @default(autoincrement())
  name      String
  ItemToTag ItemToTag[]

  @@map("tags")
}

model ItemToTag {
  tagId  Int
  tag    Tag  @relation(fields: [tagId], references: [id])
  itemId Int
  item   Item @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@id([tagId, itemId])
}
